# Use postgres/example user/password credentials
# docker-compose up -d (-d for detached)
version: '3.2'
services:
  db:
    image: postgres:13
    #    mem_limit: 2048MB
    #mem_reservation: 1G 
    restart: always
    networks:
        - pg_pgadmin_network
    volumes:
        #- db-vol:/var/lib/postgresql/data 
        - ${PGDATA_VOL}:/var/lib/postgresql/data
    ports:
      - 5532:5432
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      #POSTGRES_INITDB_ARGS:
      #POSTGRES_INITDB_WALDIR: ${POSTGRES_INITDB_WALDIR}
      #POSTGRES_HOST_AUTH_METHOD: 
      #PGDATA is where the data will be stored inside the container
      #PGDATA: ${PGDATA} 

  adminer: 
    depends_on: 
      - db
    image: adminer 
    restart: always 
    ports:
      - 8383:8080

  pgadmin4-docker:
    image: dpage/pgadmin4
    #mem_limit: 2048MB
    #mem_reservation: 1G
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
    - 7777:80

  flask_app:
    depends_on:
      - db
    image: 3.8.8-alpine3.13
    environment:
      DEBUG: ${DEBUG}


networks:
    pg_pgadmin_network:
        driver: bridge
#volumes:
#    db-vol:
#        driver: local
#        driver_opts:
#            o: bind
#            type: none
#            device: ${PGDATA_VOL}


# $ docker run -d \
#    --name some-postgres \
#    -e POSTGRES_PASSWORD=mysecretpassword \
#    -e PGDATA=/var/lib/postgresql/data/pgdata \
#    -v /custom/mount:/var/lib/postgresql/data \
#    postgres
#
#
#
#    Success. You can now start the database server using:
#    
#     pg_ctl -D /var/lib/postgres/13-docker/pgdata -l logfile start
#    
#
